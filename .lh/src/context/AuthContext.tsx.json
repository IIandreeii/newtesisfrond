{
    "sourceFile": "src/context/AuthContext.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 46,
            "patches": [
                {
                    "date": 1745191371962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745191385703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,1 @@\n-\r\n-import \n\\ No newline at end of file\n+import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745191391433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,3 @@\n-import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n\\ No newline at end of file\n+import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\r\n+\r\n+import Coo\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745191397823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,3 @@\n import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\r\n \r\n-import Coo\n\\ No newline at end of file\n+import Cookies from 'js-cookie';\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745191433419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,8 @@\n import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\r\n \r\n-import Cookies from 'js-cookie';\n\\ No newline at end of file\n+import Cookies from 'js-cookie';\r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1745191689587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,4 +5,7 @@\n \r\n \r\n \r\n \r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1745192326623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,29 @@\n-import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\r\n+import { createContext, useContext, useState } from 'react';\r\n \r\n-import Cookies from 'js-cookie';\r\n+const AuthContext = createContext();\r\n \r\n+export function AuthProvider({ children }) {\r\n+  const [authToken, setAuthToken] = useState(null);\r\n \r\n+  const login = (token) => {\r\n+    setAuthToken(token);\r\n+    localStorage.setItem('authToken', token);\r\n+  };\r\n \r\n+  const logout = () => {\r\n+    setAuthToken(null);\r\n+    localStorage.removeItem('authToken');\r\n+  };\r\n \r\n+  return (\r\n+    <AuthContext.Provider value={{ authToken, login, logout }}>\r\n+      {children}\r\n+    </AuthContext.Provider>\r\n+  );\r\n+}\r\n \r\n+export function useAuth() {\r\n+  return useContext(AuthContext);\r\n+}\r\n \r\n \r\n-\r\n"
                },
                {
                    "date": 1745192335363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,12 @@\n-import { createContext, useContext, useState } from 'react';\r\n+import { createContext, SetStateAction, useContext, useState } from 'react';\r\n \r\n const AuthContext = createContext();\r\n \r\n export function AuthProvider({ children }) {\r\n   const [authToken, setAuthToken] = useState(null);\r\n \r\n-  const login = (token) => {\r\n+  const login = (token: string | SetStateAction<null>) => {\r\n     setAuthToken(token);\r\n     localStorage.setItem('authToken', token);\r\n   };\r\n \r\n"
                },
                {
                    "date": 1745192350909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,11 @@\n import { createContext, SetStateAction, useContext, useState } from 'react';\r\n \r\n-const AuthContext = createContext();\r\n+const AuthContext = createContext({\r\n+  authToken: null,\r\n+  login: (token: string | null) => {},\r\n+  logout: () => {},\r\n+});\r\n \r\n export function AuthProvider({ children }) {\r\n   const [authToken, setAuthToken] = useState(null);\r\n \r\n"
                },
                {
                    "date": 1745192363080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,11 @@\n   login: (token: string | null) => {},\r\n   logout: () => {},\r\n });\r\n \r\n-export function AuthProvider({ children }) {\r\n+import { ReactNode } from 'react';\r\n+\r\n+export function AuthProvider({ children }: { children: ReactNode }) {\r\n   const [authToken, setAuthToken] = useState(null);\r\n \r\n   const login = (token: string | SetStateAction<null>) => {\r\n     setAuthToken(token);\r\n"
                },
                {
                    "date": 1745192369581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { createContext, SetStateAction, useContext, useState } from 'react';\r\n-\r\n+import { ReactNode } from 'react';\r\n const AuthContext = createContext({\r\n   authToken: null,\r\n   login: (token: string | null) => {},\r\n   logout: () => {},\r\n"
                },
                {
                    "date": 1745192378118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,12 +5,11 @@\n   login: (token: string | null) => {},\r\n   logout: () => {},\r\n });\r\n \r\n-import { ReactNode } from 'react';\r\n \r\n export function AuthProvider({ children }: { children: ReactNode }) {\r\n-  const [authToken, setAuthToken] = useState(null);\r\n+  const [authToken, setAuthToken] = useState<string | null>(null);\r\n \r\n   const login = (token: string | SetStateAction<null>) => {\r\n     setAuthToken(token);\r\n     localStorage.setItem('authToken', token);\r\n"
                },
                {
                    "date": 1745192383627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,9 @@\n import { createContext, SetStateAction, useContext, useState } from 'react';\r\n import { ReactNode } from 'react';\r\n+\r\n+\r\n+\r\n const AuthContext = createContext({\r\n   authToken: null,\r\n   login: (token: string | null) => {},\r\n   logout: () => {},\r\n"
                },
                {
                    "date": 1745192390354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n \r\n export function AuthProvider({ children }: { children: ReactNode }) {\r\n   const [authToken, setAuthToken] = useState<string | null>(null);\r\n \r\n-  const login = (token: string | SetStateAction<null>) => {\r\n+  const login = (token: string | null) => {\r\n     setAuthToken(token);\r\n     localStorage.setItem('authToken', token);\r\n   };\r\n \r\n"
                },
                {
                    "date": 1745192401172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   const [authToken, setAuthToken] = useState<string | null>(null);\r\n \r\n   const login = (token: string | null) => {\r\n     setAuthToken(token);\r\n-    localStorage.setItem('authToken', token);\r\n+    localStorage.setItem('authToken', token || '');\r\n   };\r\n \r\n   const logout = () => {\r\n     setAuthToken(null);\r\n"
                },
                {
                    "date": 1745192410498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,11 +2,15 @@\n import { ReactNode } from 'react';\r\n \r\n \r\n \r\n-const AuthContext = createContext({\r\n+const AuthContext = createContext<{\r\n+  authToken: string | null;\r\n+  login: (token: string | null) => void;\r\n+  logout: () => void;\r\n+}>({\r\n   authToken: null,\r\n-  login: (token: string | null) => {},\r\n+  login: () => {},\r\n   logout: () => {},\r\n });\r\n \r\n \r\n"
                },
                {
                    "date": 1745192453428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n-import { createContext, SetStateAction, useContext, useState } from 'react';\r\n+import { createContext, useContext, useState, useEffect } from 'react';\r\n import { ReactNode } from 'react';\r\n+import Cookies from 'js-cookie';\r\n \r\n+const TOKEN_COOKIE_NAME = 'authToken';\r\n \r\n-\r\n const AuthContext = createContext<{\r\n   authToken: string | null;\r\n   login: (token: string | null) => void;\r\n   logout: () => void;\r\n@@ -12,20 +13,32 @@\n   login: () => {},\r\n   logout: () => {},\r\n });\r\n \r\n-\r\n export function AuthProvider({ children }: { children: ReactNode }) {\r\n   const [authToken, setAuthToken] = useState<string | null>(null);\r\n \r\n+  // Comprobar si hay un token en las cookies al iniciar\r\n+  useEffect(() => {\r\n+    const token = Cookies.get(TOKEN_COOKIE_NAME);\r\n+    if (token) {\r\n+      setAuthToken(token);\r\n+    }\r\n+  }, []);\r\n+\r\n   const login = (token: string | null) => {\r\n     setAuthToken(token);\r\n-    localStorage.setItem('authToken', token || '');\r\n+    if (token) {\r\n+      // Guardar token en cookies con una expiración de 7 días (puedes ajustar esto)\r\n+      Cookies.set(TOKEN_COOKIE_NAME, token, { expires: 7, secure: true, sameSite: 'strict' });\r\n+    } else {\r\n+      Cookies.remove(TOKEN_COOKIE_NAME);\r\n+    }\r\n   };\r\n \r\n   const logout = () => {\r\n     setAuthToken(null);\r\n-    localStorage.removeItem('authToken');\r\n+    Cookies.remove(TOKEN_COOKIE_NAME);\r\n   };\r\n \r\n   return (\r\n     <AuthContext.Provider value={{ authToken, login, logout }}>\r\n@@ -35,7 +48,5 @@\n }\r\n \r\n export function useAuth() {\r\n   return useContext(AuthContext);\r\n-}\r\n-\r\n-\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745192500480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,49 +4,49 @@\n \r\n const TOKEN_COOKIE_NAME = 'authToken';\r\n \r\n const AuthContext = createContext<{\r\n-  authToken: string | null;\r\n-  login: (token: string | null) => void;\r\n-  logout: () => void;\r\n+    authToken: string | null;\r\n+    login: (token: string | null) => void;\r\n+    logout: () => void;\r\n }>({\r\n-  authToken: null,\r\n-  login: () => {},\r\n-  logout: () => {},\r\n+    authToken: null,\r\n+    login: () => { },\r\n+    logout: () => { },\r\n });\r\n \r\n export function AuthProvider({ children }: { children: ReactNode }) {\r\n-  const [authToken, setAuthToken] = useState<string | null>(null);\r\n+    const [authToken, setAuthToken] = useState<string | null>(null);\r\n \r\n-  // Comprobar si hay un token en las cookies al iniciar\r\n-  useEffect(() => {\r\n-    const token = Cookies.get(TOKEN_COOKIE_NAME);\r\n-    if (token) {\r\n-      setAuthToken(token);\r\n-    }\r\n-  }, []);\r\n+    // Comprobar si hay un token en las cookies al iniciar\r\n+    useEffect(() => {\r\n+        const token = Cookies.get(TOKEN_COOKIE_NAME);\r\n+        if (token) {\r\n+            setAuthToken(token);\r\n+        }\r\n+    }, []);\r\n \r\n-  const login = (token: string | null) => {\r\n-    setAuthToken(token);\r\n-    if (token) {\r\n-      // Guardar token en cookies con una expiración de 7 días (puedes ajustar esto)\r\n-      Cookies.set(TOKEN_COOKIE_NAME, token, { expires: 7, secure: true, sameSite: 'strict' });\r\n-    } else {\r\n-      Cookies.remove(TOKEN_COOKIE_NAME);\r\n-    }\r\n-  };\r\n+    const login = (token: string | null) => {\r\n+        setAuthToken(token);\r\n+        if (token) {\r\n+            // Guardar token en cookies con una expiración de 7 días (puedes ajustar esto)\r\n+            Cookies.set(TOKEN_COOKIE_NAME, token, { expires: 7, secure: true, sameSite: 'strict' });\r\n+        } else {\r\n+            Cookies.remove(TOKEN_COOKIE_NAME);\r\n+        }\r\n+    };\r\n \r\n-  const logout = () => {\r\n-    setAuthToken(null);\r\n-    Cookies.remove(TOKEN_COOKIE_NAME);\r\n-  };\r\n+    const logout = () => {\r\n+        setAuthToken(null);\r\n+        Cookies.remove(TOKEN_COOKIE_NAME);\r\n+    };\r\n \r\n-  return (\r\n-    <AuthContext.Provider value={{ authToken, login, logout }}>\r\n-      {children}\r\n-    </AuthContext.Provider>\r\n-  );\r\n+    return (\r\n+        <AuthContext.Provider value={{ authToken, login, logout }}>\r\n+            {children}\r\n+        </AuthContext.Provider>\r\n+    );\r\n }\r\n \r\n export function useAuth() {\r\n-  return useContext(AuthContext);\r\n+    return useContext(AuthContext);\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745192506946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,8 @@\n \r\n     const login = (token: string | null) => {\r\n         setAuthToken(token);\r\n         if (token) {\r\n-            // Guardar token en cookies con una expiración de 7 días (puedes ajustar esto)\r\n             Cookies.set(TOKEN_COOKIE_NAME, token, { expires: 7, secure: true, sameSite: 'strict' });\r\n         } else {\r\n             Cookies.remove(TOKEN_COOKIE_NAME);\r\n         }\r\n"
                },
                {
                    "date": 1745192516053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \r\n export function AuthProvider({ children }: { children: ReactNode }) {\r\n     const [authToken, setAuthToken] = useState<string | null>(null);\r\n \r\n-    // Comprobar si hay un token en las cookies al iniciar\r\n+\r\n     useEffect(() => {\r\n         const token = Cookies.get(TOKEN_COOKIE_NAME);\r\n         if (token) {\r\n             setAuthToken(token);\r\n"
                },
                {
                    "date": 1745192593682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,49 +3,66 @@\n import Cookies from 'js-cookie';\r\n \r\n const TOKEN_COOKIE_NAME = 'authToken';\r\n \r\n-const AuthContext = createContext<{\r\n-    authToken: string | null;\r\n-    login: (token: string | null) => void;\r\n-    logout: () => void;\r\n-}>({\r\n-    authToken: null,\r\n-    login: () => { },\r\n-    logout: () => { },\r\n+interface AuthContextType {\r\n+  authToken: string | null;\r\n+  login: (token: string) => void;\r\n+  logout: () => void;\r\n+}\r\n+\r\n+const AuthContext = createContext<AuthContextType>({\r\n+  authToken: null,\r\n+  login: () => {},\r\n+  logout: () => {},\r\n });\r\n \r\n export function AuthProvider({ children }: { children: ReactNode }) {\r\n-    const [authToken, setAuthToken] = useState<string | null>(null);\r\n+  const [authToken, setAuthToken] = useState<string | null>(null);\r\n \r\n+  // Cargar el token de las cookies al iniciar\r\n+  useEffect(() => {\r\n+    const token = Cookies.get(TOKEN_COOKIE_NAME);\r\n+    if (token) {\r\n+      setAuthToken(token);\r\n+    }\r\n+    \r\n+    // Opcional: escuchar cambios de almacenamiento en otras pestañas\r\n+    const handleStorageChange = () => {\r\n+      const currentToken = Cookies.get(TOKEN_COOKIE_NAME);\r\n+      setAuthToken(currentToken || null);\r\n+    };\r\n+    \r\n+    window.addEventListener('storage', handleStorageChange);\r\n+    return () => {\r\n+      window.removeEventListener('storage', handleStorageChange);\r\n+    };\r\n+  }, []);\r\n \r\n-    useEffect(() => {\r\n-        const token = Cookies.get(TOKEN_COOKIE_NAME);\r\n-        if (token) {\r\n-            setAuthToken(token);\r\n-        }\r\n-    }, []);\r\n+  const login = (token: string) => {\r\n+    setAuthToken(token);\r\n+    Cookies.set(TOKEN_COOKIE_NAME, token, { \r\n+      expires: 1, // Expira en 1 día\r\n+      secure: process.env.NODE_ENV === 'production', // Solo HTTPS en producción\r\n+      sameSite: 'strict'\r\n+    });\r\n+  };\r\n \r\n-    const login = (token: string | null) => {\r\n-        setAuthToken(token);\r\n-        if (token) {\r\n-            Cookies.set(TOKEN_COOKIE_NAME, token, { expires: 7, secure: true, sameSite: 'strict' });\r\n-        } else {\r\n-            Cookies.remove(TOKEN_COOKIE_NAME);\r\n-        }\r\n-    };\r\n+  const logout = () => {\r\n+    setAuthToken(null);\r\n+    Cookies.remove(TOKEN_COOKIE_NAME);\r\n+  };\r\n \r\n-    const logout = () => {\r\n-        setAuthToken(null);\r\n-        Cookies.remove(TOKEN_COOKIE_NAME);\r\n-    };\r\n-\r\n-    return (\r\n-        <AuthContext.Provider value={{ authToken, login, logout }}>\r\n-            {children}\r\n-        </AuthContext.Provider>\r\n-    );\r\n+  return (\r\n+    <AuthContext.Provider value={{ authToken, login, logout }}>\r\n+      {children}\r\n+    </AuthContext.Provider>\r\n+  );\r\n }\r\n \r\n export function useAuth() {\r\n-    return useContext(AuthContext);\r\n+  const context = useContext(AuthContext);\r\n+  if (!context) {\r\n+    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\r\n+  }\r\n+  return context;\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745192614731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n   const login = (token: string) => {\r\n     setAuthToken(token);\r\n     Cookies.set(TOKEN_COOKIE_NAME, token, { \r\n       expires: 1, // Expira en 1 día\r\n-      secure: process.env.NODE_ENV === 'production', // Solo HTTPS en producción\r\n+      secure: process.env.NODE_ENV === 'production',\r\n       sameSite: 'strict'\r\n     });\r\n   };\r\n \r\n"
                },
                {
                    "date": 1745192624639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     if (token) {\r\n       setAuthToken(token);\r\n     }\r\n     \r\n-    // Opcional: escuchar cambios de almacenamiento en otras pestañas\r\n+    \r\n     const handleStorageChange = () => {\r\n       const currentToken = Cookies.get(TOKEN_COOKIE_NAME);\r\n       setAuthToken(currentToken || null);\r\n     };\r\n@@ -40,9 +40,9 @@\n \r\n   const login = (token: string) => {\r\n     setAuthToken(token);\r\n     Cookies.set(TOKEN_COOKIE_NAME, token, { \r\n-      expires: 1, // Expira en 1 día\r\n+      expires: 1, \r\n       secure: process.env.NODE_ENV === 'production',\r\n       sameSite: 'strict'\r\n     });\r\n   };\r\n"
                },
                {
                    "date": 1745192647408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     if (token) {\r\n       setAuthToken(token);\r\n     }\r\n     \r\n-    \r\n+    // Opcional: escuchar cambios de almacenamiento en otras pestañas\r\n     const handleStorageChange = () => {\r\n       const currentToken = Cookies.get(TOKEN_COOKIE_NAME);\r\n       setAuthToken(currentToken || null);\r\n     };\r\n@@ -40,9 +40,9 @@\n \r\n   const login = (token: string) => {\r\n     setAuthToken(token);\r\n     Cookies.set(TOKEN_COOKIE_NAME, token, { \r\n-      expires: 1, \r\n+      expires: 1, // Expira en 1 día\r\n       secure: process.env.NODE_ENV === 'production',\r\n       sameSite: 'strict'\r\n     });\r\n   };\r\n"
                },
                {
                    "date": 1745192671699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     if (token) {\r\n       setAuthToken(token);\r\n     }\r\n     \r\n-    // Opcional: escuchar cambios de almacenamiento en otras pestañas\r\n+    \r\n     const handleStorageChange = () => {\r\n       const currentToken = Cookies.get(TOKEN_COOKIE_NAME);\r\n       setAuthToken(currentToken || null);\r\n     };\r\n@@ -41,9 +41,9 @@\n   const login = (token: string) => {\r\n     setAuthToken(token);\r\n     Cookies.set(TOKEN_COOKIE_NAME, token, { \r\n       expires: 1, // Expira en 1 día\r\n-      secure: process.env.NODE_ENV === 'production',\r\n+      secure: process.env.NODE_ENV === 'production', // Solo HTTPS en producción\r\n       sameSite: 'strict'\r\n     });\r\n   };\r\n \r\n"
                },
                {
                    "date": 1745209500218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \r\n export function AuthProvider({ children }: { children: ReactNode }) {\r\n   const [authToken, setAuthToken] = useState<string | null>(null);\r\n \r\n-  // Cargar el token de las cookies al iniciar\r\n+ \r\n   useEffect(() => {\r\n     const token = Cookies.get(TOKEN_COOKIE_NAME);\r\n     if (token) {\r\n       setAuthToken(token);\r\n@@ -41,9 +41,9 @@\n   const login = (token: string) => {\r\n     setAuthToken(token);\r\n     Cookies.set(TOKEN_COOKIE_NAME, token, { \r\n       expires: 1, // Expira en 1 día\r\n-      secure: process.env.NODE_ENV === 'production', // Solo HTTPS en producción\r\n+      secure: process.env.NODE_ENV === 'production', \r\n       sameSite: 'strict'\r\n     });\r\n   };\r\n \r\n"
                },
                {
                    "date": 1745210025530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,9 @@\n   }, []);\r\n \r\n   const login = (token: string) => {\r\n     setAuthToken(token);\r\n+    console.log('Token guardado en el estado:', token);\r\n     Cookies.set(TOKEN_COOKIE_NAME, token, { \r\n       expires: 1, // Expira en 1 día\r\n       secure: process.env.NODE_ENV === 'production', \r\n       sameSite: 'strict'\r\n"
                },
                {
                    "date": 1745210065208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n   }, []);\r\n \r\n   const login = (token: string) => {\r\n     setAuthToken(token);\r\n-    console.log('Token guardado en el estado:', token);\r\n+    \r\n     Cookies.set(TOKEN_COOKIE_NAME, token, { \r\n       expires: 1, // Expira en 1 día\r\n       secure: process.env.NODE_ENV === 'production', \r\n       sameSite: 'strict'\r\n"
                },
                {
                    "date": 1745211389886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+\r\n import { createContext, useContext, useState, useEffect } from 'react';\r\n import { ReactNode } from 'react';\r\n import Cookies from 'js-cookie';\r\n \r\n"
                },
                {
                    "date": 1745213391851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,70 +1,94 @@\n+\"use client\";\r\n \r\n-import { createContext, useContext, useState, useEffect } from 'react';\r\n-import { ReactNode } from 'react';\r\n+import React, { createContext, useContext, useState, useEffect } from 'react';\r\n import Cookies from 'js-cookie';\r\n+import { useRouter } from 'next/navigation';\r\n \r\n-const TOKEN_COOKIE_NAME = 'authToken';\r\n+interface User {\r\n+  id: string;\r\n+  name: string;\r\n+  email: string;\r\n+  // Agrega otros campos según tu modelo de usuario\r\n+}\r\n \r\n interface AuthContextType {\r\n   authToken: string | null;\r\n-  login: (token: string) => void;\r\n+  user: User | null;\r\n+  isLoading: boolean;\r\n+  login: (token: string, userData: User) => void;\r\n   logout: () => void;\r\n }\r\n \r\n-const AuthContext = createContext<AuthContextType>({\r\n-  authToken: null,\r\n-  login: () => {},\r\n-  logout: () => {},\r\n-});\r\n+const AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n \r\n-export function AuthProvider({ children }: { children: ReactNode }) {\r\n+export function AuthProvider({ children }: { children: React.ReactNode }) {\r\n   const [authToken, setAuthToken] = useState<string | null>(null);\r\n+  const [user, setUser] = useState<User | null>(null);\r\n+  const [isLoading, setIsLoading] = useState(true);\r\n+  const router = useRouter();\r\n \r\n- \r\n+  // Inicializar el estado desde las cookies al cargar\r\n   useEffect(() => {\r\n-    const token = Cookies.get(TOKEN_COOKIE_NAME);\r\n+    const token = Cookies.get('auth-token');\r\n+    const userData = Cookies.get('user-data');\r\n+    \r\n     if (token) {\r\n       setAuthToken(token);\r\n+      if (userData) {\r\n+        try {\r\n+          setUser(JSON.parse(userData));\r\n+        } catch (error) {\r\n+          console.error('Error parsing user data from cookie', error);\r\n+        }\r\n+      }\r\n     }\r\n     \r\n-    \r\n-    const handleStorageChange = () => {\r\n-      const currentToken = Cookies.get(TOKEN_COOKIE_NAME);\r\n-      setAuthToken(currentToken || null);\r\n-    };\r\n-    \r\n-    window.addEventListener('storage', handleStorageChange);\r\n-    return () => {\r\n-      window.removeEventListener('storage', handleStorageChange);\r\n-    };\r\n+    setIsLoading(false);\r\n   }, []);\r\n \r\n-  const login = (token: string) => {\r\n+  const login = (token: string, userData: User) => {\r\n+    // Guardar en estado\r\n     setAuthToken(token);\r\n+    setUser(userData);\r\n     \r\n-    Cookies.set(TOKEN_COOKIE_NAME, token, { \r\n-      expires: 1, // Expira en 1 día\r\n-      secure: process.env.NODE_ENV === 'production', \r\n-      sameSite: 'strict'\r\n+    // Guardar en cookies\r\n+    Cookies.set('auth-token', token, { \r\n+      expires: 7, // Expira en 7 días\r\n+      sameSite: 'strict',\r\n+      secure: process.env.NODE_ENV === 'production'\r\n     });\r\n+    \r\n+    Cookies.set('user-data', JSON.stringify(userData), {\r\n+      expires: 7,\r\n+      sameSite: 'strict',\r\n+      secure: process.env.NODE_ENV === 'production'\r\n+    });\r\n   };\r\n \r\n   const logout = () => {\r\n+    // Limpiar estado\r\n     setAuthToken(null);\r\n-    Cookies.remove(TOKEN_COOKIE_NAME);\r\n+    setUser(null);\r\n+    \r\n+    // Eliminar cookies\r\n+    Cookies.remove('auth-token');\r\n+    Cookies.remove('user-data');\r\n+    \r\n+    // Redirigir a la página de inicio\r\n+    router.push('/');\r\n   };\r\n \r\n   return (\r\n-    <AuthContext.Provider value={{ authToken, login, logout }}>\r\n+    <AuthContext.Provider value={{ authToken, user, isLoading, login, logout }}>\r\n       {children}\r\n     </AuthContext.Provider>\r\n   );\r\n }\r\n \r\n export function useAuth() {\r\n   const context = useContext(AuthContext);\r\n-  if (!context) {\r\n+  if (context === undefined) {\r\n     throw new Error('useAuth debe ser usado dentro de un AuthProvider');\r\n   }\r\n   return context;\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745213673107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,26 +28,43 @@\n   const router = useRouter();\r\n \r\n   // Inicializar el estado desde las cookies al cargar\r\n   useEffect(() => {\r\n-    const token = Cookies.get('auth-token');\r\n-    const userData = Cookies.get('user-data');\r\n-    \r\n-    if (token) {\r\n-      setAuthToken(token);\r\n-      if (userData) {\r\n-        try {\r\n-          setUser(JSON.parse(userData));\r\n-        } catch (error) {\r\n-          console.error('Error parsing user data from cookie', error);\r\n+    try {\r\n+      const token = Cookies.get('auth-token');\r\n+      const userData = Cookies.get('user-data');\r\n+      \r\n+      if (token) {\r\n+        setAuthToken(token);\r\n+        \r\n+        if (userData && userData !== 'undefined') {\r\n+          try {\r\n+            const parsedUserData = JSON.parse(userData);\r\n+            setUser(parsedUserData);\r\n+          } catch (error) {\r\n+            console.error('Error parsing user data from cookie:', error);\r\n+            // Si hay un error al parsear, eliminar la cookie corrupta\r\n+            Cookies.remove('user-data');\r\n+          }\r\n         }\r\n       }\r\n+    } catch (error) {\r\n+      console.error('Error loading authentication state:', error);\r\n+      // Limpiar cookies potencialmente corruptas\r\n+      Cookies.remove('auth-token');\r\n+      Cookies.remove('user-data');\r\n+    } finally {\r\n+      setIsLoading(false);\r\n     }\r\n-    \r\n-    setIsLoading(false);\r\n   }, []);\r\n \r\n   const login = (token: string, userData: User) => {\r\n+    // Validar datos antes de guardar\r\n+    if (!token) {\r\n+      console.error('Attempted to login with empty token');\r\n+      return;\r\n+    }\r\n+    \r\n     // Guardar en estado\r\n     setAuthToken(token);\r\n     setUser(userData);\r\n     \r\n@@ -57,13 +74,19 @@\n       sameSite: 'strict',\r\n       secure: process.env.NODE_ENV === 'production'\r\n     });\r\n     \r\n-    Cookies.set('user-data', JSON.stringify(userData), {\r\n-      expires: 7,\r\n-      sameSite: 'strict',\r\n-      secure: process.env.NODE_ENV === 'production'\r\n-    });\r\n+    if (userData) {\r\n+      try {\r\n+        Cookies.set('user-data', JSON.stringify(userData), {\r\n+          expires: 7,\r\n+          sameSite: 'strict',\r\n+          secure: process.env.NODE_ENV === 'production'\r\n+        });\r\n+      } catch (error) {\r\n+        console.error('Error storing user data in cookie:', error);\r\n+      }\r\n+    }\r\n   };\r\n \r\n   const logout = () => {\r\n     // Limpiar estado\r\n"
                },
                {
                    "date": 1745214112605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,14 +3,8 @@\n import React, { createContext, useContext, useState, useEffect } from 'react';\r\n import Cookies from 'js-cookie';\r\n import { useRouter } from 'next/navigation';\r\n \r\n-interface User {\r\n-  id: string;\r\n-  name: string;\r\n-  email: string;\r\n-  // Agrega otros campos según tu modelo de usuario\r\n-}\r\n \r\n interface AuthContextType {\r\n   authToken: string | null;\r\n   user: User | null;\r\n"
                },
                {
                    "date": 1745214122235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,11 +6,10 @@\n \r\n \r\n interface AuthContextType {\r\n   authToken: string | null;\r\n-  user: User | null;\r\n   isLoading: boolean;\r\n-  login: (token: string, userData: User) => void;\r\n+  login: (token: string) => void;\r\n   logout: () => void;\r\n }\r\n \r\n const AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n"
                },
                {
                    "date": 1745214129028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n const AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n \r\n export function AuthProvider({ children }: { children: React.ReactNode }) {\r\n   const [authToken, setAuthToken] = useState<string | null>(null);\r\n-  const [user, setUser] = useState<User | null>(null);\r\n+\r\n   const [isLoading, setIsLoading] = useState(true);\r\n   const router = useRouter();\r\n \r\n   // Inicializar el estado desde las cookies al cargar\r\n"
                },
                {
                    "date": 1745214135516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,110 +0,0 @@\n-\"use client\";\r\n-\r\n-import React, { createContext, useContext, useState, useEffect } from 'react';\r\n-import Cookies from 'js-cookie';\r\n-import { useRouter } from 'next/navigation';\r\n-\r\n-\r\n-interface AuthContextType {\r\n-  authToken: string | null;\r\n-  isLoading: boolean;\r\n-  login: (token: string) => void;\r\n-  logout: () => void;\r\n-}\r\n-\r\n-const AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n-\r\n-export function AuthProvider({ children }: { children: React.ReactNode }) {\r\n-  const [authToken, setAuthToken] = useState<string | null>(null);\r\n-\r\n-  const [isLoading, setIsLoading] = useState(true);\r\n-  const router = useRouter();\r\n-\r\n-  // Inicializar el estado desde las cookies al cargar\r\n-  useEffect(() => {\r\n-    try {\r\n-      const token = Cookies.get('auth-token');\r\n-      const userData = Cookies.get('user-data');\r\n-      \r\n-      if (token) {\r\n-        setAuthToken(token);\r\n-        \r\n-        if (userData && userData !== 'undefined') {\r\n-          try {\r\n-            const parsedUserData = JSON.parse(userData);\r\n-            setUser(parsedUserData);\r\n-          } catch (error) {\r\n-            console.error('Error parsing user data from cookie:', error);\r\n-            // Si hay un error al parsear, eliminar la cookie corrupta\r\n-            Cookies.remove('user-data');\r\n-          }\r\n-        }\r\n-      }\r\n-    } catch (error) {\r\n-      console.error('Error loading authentication state:', error);\r\n-      // Limpiar cookies potencialmente corruptas\r\n-      Cookies.remove('auth-token');\r\n-      Cookies.remove('user-data');\r\n-    } finally {\r\n-      setIsLoading(false);\r\n-    }\r\n-  }, []);\r\n-\r\n-  const login = (token: string, userData: User) => {\r\n-    // Validar datos antes de guardar\r\n-    if (!token) {\r\n-      console.error('Attempted to login with empty token');\r\n-      return;\r\n-    }\r\n-    \r\n-    // Guardar en estado\r\n-    setAuthToken(token);\r\n-    setUser(userData);\r\n-    \r\n-    // Guardar en cookies\r\n-    Cookies.set('auth-token', token, { \r\n-      expires: 7, // Expira en 7 días\r\n-      sameSite: 'strict',\r\n-      secure: process.env.NODE_ENV === 'production'\r\n-    });\r\n-    \r\n-    if (userData) {\r\n-      try {\r\n-        Cookies.set('user-data', JSON.stringify(userData), {\r\n-          expires: 7,\r\n-          sameSite: 'strict',\r\n-          secure: process.env.NODE_ENV === 'production'\r\n-        });\r\n-      } catch (error) {\r\n-        console.error('Error storing user data in cookie:', error);\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const logout = () => {\r\n-    // Limpiar estado\r\n-    setAuthToken(null);\r\n-    setUser(null);\r\n-    \r\n-    // Eliminar cookies\r\n-    Cookies.remove('auth-token');\r\n-    Cookies.remove('user-data');\r\n-    \r\n-    // Redirigir a la página de inicio\r\n-    router.push('/');\r\n-  };\r\n-\r\n-  return (\r\n-    <AuthContext.Provider value={{ authToken, user, isLoading, login, logout }}>\r\n-      {children}\r\n-    </AuthContext.Provider>\r\n-  );\r\n-}\r\n-\r\n-export function useAuth() {\r\n-  const context = useContext(AuthContext);\r\n-  if (context === undefined) {\r\n-    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\r\n-  }\r\n-  return context;\r\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745214143516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,117 @@\n+\"use client\";\r\n+\r\n+import React, { createContext, useContext, useState, useEffect } from 'react';\r\n+import Cookies from 'js-cookie';\r\n+import { useRouter } from 'next/navigation';\r\n+\r\n+interface User {\r\n+  id: string;\r\n+  name: string;\r\n+  email: string;\r\n+  \r\n+}\r\n+\r\n+interface AuthContextType {\r\n+  authToken: string | null;\r\n+  user: User | null;\r\n+  isLoading: boolean;\r\n+  login: (token: string, userData: User) => void;\r\n+  logout: () => void;\r\n+}\r\n+\r\n+const AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n+\r\n+export function AuthProvider({ children }: { children: React.ReactNode }) {\r\n+  const [authToken, setAuthToken] = useState<string | null>(null);\r\n+  const [user, setUser] = useState<User | null>(null);\r\n+  const [isLoading, setIsLoading] = useState(true);\r\n+  const router = useRouter();\r\n+\r\n+  // Inicializar el estado desde las cookies al cargar\r\n+  useEffect(() => {\r\n+    try {\r\n+      const token = Cookies.get('auth-token');\r\n+      const userData = Cookies.get('user-data');\r\n+      \r\n+      if (token) {\r\n+        setAuthToken(token);\r\n+        \r\n+        if (userData && userData !== 'undefined') {\r\n+          try {\r\n+            const parsedUserData = JSON.parse(userData);\r\n+            setUser(parsedUserData);\r\n+          } catch (error) {\r\n+            console.error('Error parsing user data from cookie:', error);\r\n+            // Si hay un error al parsear, eliminar la cookie corrupta\r\n+            Cookies.remove('user-data');\r\n+          }\r\n+        }\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error loading authentication state:', error);\r\n+      // Limpiar cookies potencialmente corruptas\r\n+      Cookies.remove('auth-token');\r\n+      Cookies.remove('user-data');\r\n+    } finally {\r\n+      setIsLoading(false);\r\n+    }\r\n+  }, []);\r\n+\r\n+  const login = (token: string, userData: User) => {\r\n+    // Validar datos antes de guardar\r\n+    if (!token) {\r\n+      console.error('Attempted to login with empty token');\r\n+      return;\r\n+    }\r\n+    \r\n+    // Guardar en estado\r\n+    setAuthToken(token);\r\n+    setUser(userData);\r\n+    \r\n+    // Guardar en cookies\r\n+    Cookies.set('auth-token', token, { \r\n+      expires: 7, // Expira en 7 días\r\n+      sameSite: 'strict',\r\n+      secure: process.env.NODE_ENV === 'production'\r\n+    });\r\n+    \r\n+    if (userData) {\r\n+      try {\r\n+        Cookies.set('user-data', JSON.stringify(userData), {\r\n+          expires: 7,\r\n+          sameSite: 'strict',\r\n+          secure: process.env.NODE_ENV === 'production'\r\n+        });\r\n+      } catch (error) {\r\n+        console.error('Error storing user data in cookie:', error);\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const logout = () => {\r\n+    // Limpiar estado\r\n+    setAuthToken(null);\r\n+    setUser(null);\r\n+    \r\n+    // Eliminar cookies\r\n+    Cookies.remove('auth-token');\r\n+    Cookies.remove('user-data');\r\n+    \r\n+    // Redirigir a la página de inicio\r\n+    router.push('/');\r\n+  };\r\n+\r\n+  return (\r\n+    <AuthContext.Provider value={{ authToken, user, isLoading, login, logout }}>\r\n+      {children}\r\n+    </AuthContext.Provider>\r\n+  );\r\n+}\r\n+\r\n+export function useAuth() {\r\n+  const context = useContext(AuthContext);\r\n+  if (context === undefined) {\r\n+    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\r\n+  }\r\n+  return context;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745214359232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,107 +3,74 @@\n import React, { createContext, useContext, useState, useEffect } from 'react';\r\n import Cookies from 'js-cookie';\r\n import { useRouter } from 'next/navigation';\r\n \r\n-interface User {\r\n-  id: string;\r\n-  name: string;\r\n-  email: string;\r\n-  \r\n-}\r\n-\r\n interface AuthContextType {\r\n   authToken: string | null;\r\n-  user: User | null;\r\n   isLoading: boolean;\r\n-  login: (token: string, userData: User) => void;\r\n+  login: (token: string) => void;\r\n   logout: () => void;\r\n }\r\n \r\n const AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n \r\n export function AuthProvider({ children }: { children: React.ReactNode }) {\r\n   const [authToken, setAuthToken] = useState<string | null>(null);\r\n-  const [user, setUser] = useState<User | null>(null);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n   const router = useRouter();\r\n \r\n   // Inicializar el estado desde las cookies al cargar\r\n   useEffect(() => {\r\n     try {\r\n       const token = Cookies.get('auth-token');\r\n-      const userData = Cookies.get('user-data');\r\n       \r\n       if (token) {\r\n         setAuthToken(token);\r\n-        \r\n-        if (userData && userData !== 'undefined') {\r\n-          try {\r\n-            const parsedUserData = JSON.parse(userData);\r\n-            setUser(parsedUserData);\r\n-          } catch (error) {\r\n-            console.error('Error parsing user data from cookie:', error);\r\n-            // Si hay un error al parsear, eliminar la cookie corrupta\r\n-            Cookies.remove('user-data');\r\n-          }\r\n-        }\r\n       }\r\n     } catch (error) {\r\n       console.error('Error loading authentication state:', error);\r\n-      // Limpiar cookies potencialmente corruptas\r\n       Cookies.remove('auth-token');\r\n-      Cookies.remove('user-data');\r\n     } finally {\r\n       setIsLoading(false);\r\n     }\r\n   }, []);\r\n \r\n-  const login = (token: string, userData: User) => {\r\n-    // Validar datos antes de guardar\r\n+  const login = (token: string) => {\r\n+    // Validar token\r\n     if (!token) {\r\n       console.error('Attempted to login with empty token');\r\n       return;\r\n     }\r\n     \r\n-    // Guardar en estado\r\n+    // Guardar token en estado y cookie\r\n     setAuthToken(token);\r\n-    setUser(userData);\r\n     \r\n     // Guardar en cookies\r\n     Cookies.set('auth-token', token, { \r\n-      expires: 7, // Expira en 7 días\r\n+      expires: 7, \r\n       sameSite: 'strict',\r\n       secure: process.env.NODE_ENV === 'production'\r\n     });\r\n-    \r\n-    if (userData) {\r\n-      try {\r\n-        Cookies.set('user-data', JSON.stringify(userData), {\r\n-          expires: 7,\r\n-          sameSite: 'strict',\r\n-          secure: process.env.NODE_ENV === 'production'\r\n-        });\r\n-      } catch (error) {\r\n-        console.error('Error storing user data in cookie:', error);\r\n-      }\r\n-    }\r\n   };\r\n \r\n   const logout = () => {\r\n     // Limpiar estado\r\n     setAuthToken(null);\r\n-    setUser(null);\r\n     \r\n-    // Eliminar cookies\r\n+    // Eliminar cookie de token\r\n     Cookies.remove('auth-token');\r\n-    Cookies.remove('user-data');\r\n     \r\n     // Redirigir a la página de inicio\r\n     router.push('/');\r\n   };\r\n \r\n   return (\r\n-    <AuthContext.Provider value={{ authToken, user, isLoading, login, logout }}>\r\n+    <AuthContext.Provider value={{ \r\n+      authToken, \r\n+      isLoading, \r\n+      login, \r\n+      logout \r\n+    }}>\r\n       {children}\r\n     </AuthContext.Provider>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1745295984570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,85 @@\n+\"use client\";\r\n+\r\n+import React, { createContext, useContext, useState, useEffect } from 'react';\r\n+import Cookies from 'js-cookie';\r\n+import { useRouter } from 'next/navigation';\r\n+\r\n+interface AuthContextType {\r\n+  authToken: string | null;\r\n+  isLoading: boolean;\r\n+  login: (token: string) => void;\r\n+  logout: () => void;\r\n+}\r\n+\r\n+const AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n+\r\n+export function AuthProvider({ children }: { children: React.ReactNode }) {\r\n+  const [authToken, setAuthToken] = useState<string | null>(null);\r\n+  const [isLoading, setIsLoading] = useState(true);\r\n+  const router = useRouter();\r\n+\r\n+  // Inicializar el estado desde las cookies al cargar\r\n+  useEffect(() => {\r\n+    try {\r\n+      const token = Cookies.get('auth-token');\r\n+      console.log('Token recuperado de cookies:', token);\r\n+      \r\n+      if (token) {\r\n+        setAuthToken(token);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error loading authentication state:', error);\r\n+      Cookies.remove('auth-token');\r\n+    } finally {\r\n+      setIsLoading(false);\r\n+    }\r\n+  }, []);\r\n+\r\n+  const login = (token: string) => {\r\n+    // Validar token\r\n+    if (!token) {\r\n+      console.error('Attempted to login with empty token');\r\n+      return;\r\n+    }\r\n+    \r\n+    // Guardar token en estado y cookie\r\n+    setAuthToken(token);\r\n+    \r\n+    // Guardar en cookies\r\n+    Cookies.set('auth-token', token, { \r\n+      expires: 1, \r\n+      sameSite: 'strict',\r\n+      secure: process.env.NODE_ENV === 'production'\r\n+    });\r\n+  };\r\n+\r\n+  const logout = () => {\r\n+    // Limpiar estado\r\n+    setAuthToken(null);\r\n+    \r\n+    // Eliminar cookie de token\r\n+    Cookies.remove('auth-token');\r\n+    \r\n+    // Redirigir a la página de inicio\r\n+    router.push('/');\r\n+  };\r\n+\r\n+  return (\r\n+    <AuthContext.Provider value={{ \r\n+      authToken, \r\n+      isLoading, \r\n+      login, \r\n+      logout \r\n+    }}>\r\n+      {children}\r\n+    </AuthContext.Provider>\r\n+  );\r\n+}\r\n+\r\n+export function useAuth() {\r\n+  const context = useContext(AuthContext);\r\n+  if (context === undefined) {\r\n+    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\r\n+  }\r\n+  return context;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745295995430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,16 +41,18 @@\n       console.error('Attempted to login with empty token');\r\n       return;\r\n     }\r\n     \r\n-    // Guardar token en estado y cookie\r\n+    // Guardar token en estado\r\n     setAuthToken(token);\r\n     \r\n-    // Guardar en cookies\r\n+    // Configuración mejorada de cookies\r\n     Cookies.set('auth-token', token, { \r\n-      expires: 1, \r\n-      sameSite: 'strict',\r\n-      secure: process.env.NODE_ENV === 'production'\r\n+      expires: 1,            // Expira en 1 día\r\n+      path: '/',             // Disponible en toda la aplicación\r\n+      sameSite: 'lax',       // Menos restrictivo que 'strict', pero sigue siendo seguro\r\n+      secure: process.env.NODE_ENV === 'production',\r\n+      domain: window.location.hostname // Asegura que funcione en el dominio correcto\r\n     });\r\n   };\r\n \r\n   const logout = () => {\r\n@@ -81,89 +83,5 @@\n   if (context === undefined) {\r\n     throw new Error('useAuth debe ser usado dentro de un AuthProvider');\r\n   }\r\n   return context;\r\n-}\n-\"use client\";\r\n-\r\n-import React, { createContext, useContext, useState, useEffect } from 'react';\r\n-import Cookies from 'js-cookie';\r\n-import { useRouter } from 'next/navigation';\r\n-\r\n-interface AuthContextType {\r\n-  authToken: string | null;\r\n-  isLoading: boolean;\r\n-  login: (token: string) => void;\r\n-  logout: () => void;\r\n-}\r\n-\r\n-const AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n-\r\n-export function AuthProvider({ children }: { children: React.ReactNode }) {\r\n-  const [authToken, setAuthToken] = useState<string | null>(null);\r\n-  const [isLoading, setIsLoading] = useState(true);\r\n-  const router = useRouter();\r\n-\r\n-  // Inicializar el estado desde las cookies al cargar\r\n-  useEffect(() => {\r\n-    try {\r\n-      const token = Cookies.get('auth-token');\r\n-      \r\n-      if (token) {\r\n-        setAuthToken(token);\r\n-      }\r\n-    } catch (error) {\r\n-      console.error('Error loading authentication state:', error);\r\n-      Cookies.remove('auth-token');\r\n-    } finally {\r\n-      setIsLoading(false);\r\n-    }\r\n-  }, []);\r\n-\r\n-  const login = (token: string) => {\r\n-    // Validar token\r\n-    if (!token) {\r\n-      console.error('Attempted to login with empty token');\r\n-      return;\r\n-    }\r\n-    \r\n-    // Guardar token en estado y cookie\r\n-    setAuthToken(token);\r\n-    \r\n-    // Guardar en cookies\r\n-    Cookies.set('auth-token', token, { \r\n-      expires: 7, \r\n-      sameSite: 'strict',\r\n-      secure: process.env.NODE_ENV === 'production'\r\n-    });\r\n-  };\r\n-\r\n-  const logout = () => {\r\n-    // Limpiar estado\r\n-    setAuthToken(null);\r\n-    \r\n-    // Eliminar cookie de token\r\n-    Cookies.remove('auth-token');\r\n-    \r\n-    // Redirigir a la página de inicio\r\n-    router.push('/');\r\n-  };\r\n-\r\n-  return (\r\n-    <AuthContext.Provider value={{ \r\n-      authToken, \r\n-      isLoading, \r\n-      login, \r\n-      logout \r\n-    }}>\r\n-      {children}\r\n-    </AuthContext.Provider>\r\n-  );\r\n-}\r\n-\r\n-export function useAuth() {\r\n-  const context = useContext(AuthContext);\r\n-  if (context === undefined) {\r\n-    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\r\n-  }\r\n-  return context;\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745296019055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n     // Configuración mejorada de cookies\r\n     Cookies.set('auth-token', token, { \r\n       expires: 1,            // Expira en 1 día\r\n       path: '/',             // Disponible en toda la aplicación\r\n-      sameSite: 'lax',       // Menos restrictivo que 'strict', pero sigue siendo seguro\r\n+      sameSite: 'strict',       // Menos restrictivo que 'strict', pero sigue siendo seguro\r\n       secure: process.env.NODE_ENV === 'production',\r\n       domain: window.location.hostname // Asegura que funcione en el dominio correcto\r\n     });\r\n   };\r\n"
                },
                {
                    "date": 1745296144406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,8 @@\n   // Inicializar el estado desde las cookies al cargar\r\n   useEffect(() => {\r\n     try {\r\n       const token = Cookies.get('auth-token');\r\n-      console.log('Token recuperado de cookies:', token);\r\n       \r\n       if (token) {\r\n         setAuthToken(token);\r\n       }\r\n@@ -41,18 +40,16 @@\n       console.error('Attempted to login with empty token');\r\n       return;\r\n     }\r\n     \r\n-    // Guardar token en estado\r\n+    // Guardar token en estado y cookie\r\n     setAuthToken(token);\r\n     \r\n-    // Configuración mejorada de cookies\r\n+    // Guardar en cookies\r\n     Cookies.set('auth-token', token, { \r\n-      expires: 1,            // Expira en 1 día\r\n-      path: '/',             // Disponible en toda la aplicación\r\n-      sameSite: 'strict',       // Menos restrictivo que 'strict', pero sigue siendo seguro\r\n-      secure: process.env.NODE_ENV === 'production',\r\n-      domain: window.location.hostname // Asegura que funcione en el dominio correcto\r\n+      expires: 1, \r\n+      sameSite: 'strict',\r\n+      secure: process.env.NODE_ENV === 'production'\r\n     });\r\n   };\r\n \r\n   const logout = () => {\r\n"
                },
                {
                    "date": 1745296166758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n   const [authToken, setAuthToken] = useState<string | null>(null);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n   const router = useRouter();\r\n \r\n-  // Inicializar el estado desde las cookies al cargar\r\n+  \r\n   useEffect(() => {\r\n     try {\r\n       const token = Cookies.get('auth-token');\r\n       \r\n"
                },
                {
                    "date": 1745296174049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,10 @@\n       setIsLoading(false);\r\n     }\r\n   }, []);\r\n \r\n+  console\r\n+\r\n   const login = (token: string) => {\r\n     // Validar token\r\n     if (!token) {\r\n       console.error('Attempted to login with empty token');\r\n"
                },
                {
                    "date": 1745296253271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n       setIsLoading(false);\r\n     }\r\n   }, []);\r\n \r\n-  console\r\n+  console.log(', authToken);\r\n \r\n   const login = (token: string) => {\r\n     // Validar token\r\n     if (!token) {\r\n"
                },
                {
                    "date": 1745296849023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,8 @@\n       setIsLoading(false);\r\n     }\r\n   }, []);\r\n \r\n-  console.log(', authToken);\r\n \r\n   const login = (token: string) => {\r\n     // Validar token\r\n     if (!token) {\r\n@@ -49,8 +48,9 @@\n     // Guardar en cookies\r\n     Cookies.set('auth-token', token, { \r\n       expires: 1, \r\n       sameSite: 'strict',\r\n+      path\r\n       secure: process.env.NODE_ENV === 'production'\r\n     });\r\n   };\r\n \r\n"
                },
                {
                    "date": 1745297085141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,8 @@\n     // Guardar en cookies\r\n     Cookies.set('auth-token', token, { \r\n       expires: 1, \r\n       sameSite: 'strict',\r\n-      path\r\n       secure: process.env.NODE_ENV === 'production'\r\n     });\r\n   };\r\n \r\n"
                },
                {
                    "date": 1745297490920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,85 +1,53 @@\n \"use client\";\r\n \r\n-import React, { createContext, useContext, useState, useEffect } from 'react';\r\n+import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\r\n import Cookies from 'js-cookie';\r\n-import { useRouter } from 'next/navigation';\r\n \r\n interface AuthContextType {\r\n-  authToken: string | null;\r\n-  isLoading: boolean;\r\n+  token: string | null;\r\n   login: (token: string) => void;\r\n   logout: () => void;\r\n }\r\n \r\n const AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n \r\n-export function AuthProvider({ children }: { children: React.ReactNode }) {\r\n-  const [authToken, setAuthToken] = useState<string | null>(null);\r\n-  const [isLoading, setIsLoading] = useState(true);\r\n-  const router = useRouter();\r\n+export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n+  const [token, setToken] = useState<string | null>(null);\r\n \r\n-  \r\n+  const loadToken = () => {\r\n+    const storedToken = Cookies.get('authToken');\r\n+    setToken(storedToken || null);\r\n+  };\r\n+\r\n   useEffect(() => {\r\n-    try {\r\n-      const token = Cookies.get('auth-token');\r\n-      \r\n-      if (token) {\r\n-        setAuthToken(token);\r\n-      }\r\n-    } catch (error) {\r\n-      console.error('Error loading authentication state:', error);\r\n-      Cookies.remove('auth-token');\r\n-    } finally {\r\n-      setIsLoading(false);\r\n-    }\r\n+    loadToken();\r\n+    window.addEventListener('storage', loadToken);\r\n+    return () => {\r\n+      window.removeEventListener('storage', loadToken);\r\n+    };\r\n   }, []);\r\n \r\n-\r\n-  const login = (token: string) => {\r\n-    // Validar token\r\n-    if (!token) {\r\n-      console.error('Attempted to login with empty token');\r\n-      return;\r\n-    }\r\n-    \r\n-    // Guardar token en estado y cookie\r\n-    setAuthToken(token);\r\n-    \r\n-    // Guardar en cookies\r\n-    Cookies.set('auth-token', token, { \r\n-      expires: 1, \r\n-      sameSite: 'strict',\r\n-      secure: process.env.NODE_ENV === 'production'\r\n-    });\r\n+  const login = (newToken: string) => {\r\n+    Cookies.set('authToken', newToken, { expires: 1 });\r\n+    setToken(newToken);\r\n   };\r\n \r\n   const logout = () => {\r\n-    // Limpiar estado\r\n-    setAuthToken(null);\r\n-    \r\n-    // Eliminar cookie de token\r\n-    Cookies.remove('auth-token');\r\n-    \r\n-    // Redirigir a la página de inicio\r\n-    router.push('/');\r\n+    Cookies.remove('authToken');\r\n+    setToken(null);\r\n   };\r\n \r\n\\ No newline at end of file\n   return (\r\n-    <AuthContext.Provider value={{ \r\n-      authToken, \r\n-      isLoading, \r\n-      login, \r\n-      logout \r\n-    }}>\r\n+    <AuthContext.Provider value={{ token, login, logout }}>\r\n       {children}\r\n     </AuthContext.Provider>\r\n   );\r\n-}\r\n+};\r\n \r\n-export function useAuth() {\r\n+export const useAuth = () => {\r\n   const context = useContext(AuthContext);\r\n-  if (context === undefined) {\r\n+  if (!context) {\r\n     throw new Error('useAuth debe ser usado dentro de un AuthProvider');\r\n   }\r\n   return context;\r\n-}\n+};\n\\ No newline at end of file\n"
                }
            ],
            "date": 1745191371962,
            "name": "Commit-0",
            "content": "\r\nimport "
        }
    ]
}