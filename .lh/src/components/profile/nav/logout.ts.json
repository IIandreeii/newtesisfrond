{
    "sourceFile": "src/components/profile/nav/logout.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1745463471484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745463550606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,35 @@\n import { useAuth } from \"@/context/AuthContext\";\n import { useToast } from \"@/context/ToastContext\";\n import { environment } from \"@/environments/environment\";\n-import axios from \"axios\";\n+import axios, { AxiosError } from \"axios\";\n import { useState } from \"react\";\n import Cookies from \"js-cookie\";\n import { useRouter } from \"next/navigation\"; \n+\n+// Definimos la interfaz para la respuesta del logout\n+interface LogoutResponse {\n+  message?: string;\n+  success?: boolean;\n+  [key: string]: unknown; // Para cualquier propiedad adicional\n+}\n+\n+// Interfaz para el estado del loader\n+interface LoaderState {\n+  loading: boolean;\n+  action: string;\n+}\n+\n axios.defaults.baseURL = environment.apiUrl;\n \n export const useLogout = () => {\n   const storedToken = Cookies.get('authToken');\n-  const [getResponse, setGetResponse] = useState<any>(null);\n-  const [loader, setLoader] = useState({ loading: false, action: \"loader\" });\n+  const [getResponse, setGetResponse] = useState<LogoutResponse | null>(null);\n+  const [loader, setLoader] = useState<LoaderState>({ loading: false, action: \"loader\" });\n   const { logout } = useAuth();\n   const { showError, showSuccess } = useToast();\n   const router = useRouter(); // Inicializa el router\n+  \n   const postLogout = async () => {\n     if (!storedToken) {\n       showError(\"No hay sesión activa\");\n       return;\n@@ -26,13 +41,8 @@\n \n     setLoader({ loading: true, action: \"logout\" });\n \n     try {\n-      interface LogoutResponse {\n-        message?: string;\n-        success?: boolean;\n-      }\n-\n       const response = await axios.request<LogoutResponse>({\n         method,\n         url,\n         headers: {\n@@ -54,12 +64,18 @@\n         setGetResponse(response.data);\n       }\n \n       \n-    } catch (error: ku) {\n-      showError(\n-        error.response?.data?.message || \"Ocurrió un error al cerrar sesión\"\n-      );\n+    } catch (error: unknown) {\n+      // Verificar si es un error de Axios y tratarlo adecuadamente\n+      if (axios.isAxiosError(error)) {\n+        const axiosError = error as AxiosError<{message?: string}>;\n+        showError(\n+          axiosError.response?.data?.message || \"Ocurrió un error al cerrar sesión\"\n+        );\n+      } else {\n+        showError(\"Ocurrió un error inesperado al cerrar sesión\");\n+      }\n       console.error(\"Logout error:\", error);\n       return error;\n     } finally {\n       setLoader({ loading: false, action: \"\" });\n"
                },
                {
                    "date": 1745468841816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,20 @@\n import { useAuth } from \"@/context/AuthContext\";\n import { useToast } from \"@/context/ToastContext\";\n import { environment } from \"@/environments/environment\";\n-import axios, { AxiosError } from \"axios\";\n+import axios from \"axios\";\n import { useState } from \"react\";\n import Cookies from \"js-cookie\";\n import { useRouter } from \"next/navigation\"; \n-\n-// Definimos la interfaz para la respuesta del logout\n-interface LogoutResponse {\n-  message?: string;\n-  success?: boolean;\n-  [key: string]: unknown; // Para cualquier propiedad adicional\n-}\n-\n-// Interfaz para el estado del loader\n-interface LoaderState {\n-  loading: boolean;\n-  action: string;\n-}\n-\n axios.defaults.baseURL = environment.apiUrl;\n \n export const useLogout = () => {\n   const storedToken = Cookies.get('authToken');\n-  const [getResponse, setGetResponse] = useState<LogoutResponse | null>(null);\n-  const [loader, setLoader] = useState<LoaderState>({ loading: false, action: \"loader\" });\n+  const [getResponse, setGetResponse] = useState<any>(null);\n+  const [loader, setLoader] = useState({ loading: false, action: \"loader\" });\n   const { logout } = useAuth();\n   const { showError, showSuccess } = useToast();\n   const router = useRouter(); // Inicializa el router\n-  \n   const postLogout = async () => {\n     if (!storedToken) {\n       showError(\"No hay sesión activa\");\n       return;\n@@ -41,8 +26,13 @@\n \n     setLoader({ loading: true, action: \"logout\" });\n \n     try {\n+      interface LogoutResponse {\n+        message?: string;\n+        success?: boolean;\n+      }\n+\n       const response = await axios.request<LogoutResponse>({\n         method,\n         url,\n         headers: {\n@@ -64,18 +54,12 @@\n         setGetResponse(response.data);\n       }\n \n       \n-    } catch (error: unknown) {\n-      // Verificar si es un error de Axios y tratarlo adecuadamente\n-      if (axios.isAxiosError(error)) {\n-        const axiosError = error as AxiosError<{message?: string}>;\n-        showError(\n-          axiosError.response?.data?.message || \"Ocurrió un error al cerrar sesión\"\n-        );\n-      } else {\n-        showError(\"Ocurrió un error inesperado al cerrar sesión\");\n-      }\n+    } catch (error: ku) {\n+      showError(\n+        error.response?.data?.message || \"Ocurrió un error al cerrar sesión\"\n+      );\n       console.error(\"Logout error:\", error);\n       return error;\n     } finally {\n       setLoader({ loading: false, action: \"\" });\n"
                },
                {
                    "date": 1745468886900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,90 @@\n+import { useAuth } from \"@/context/AuthContext\";\n+import { useToast } from \"@/context/ToastContext\";\n+import { environment } from \"@/environments/environment\";\n+import axios, { AxiosError } from \"axios\";\n+import { useState } from \"react\";\n+import Cookies from \"js-cookie\";\n+import { useRouter } from \"next/navigation\"; \n+\n+// Definimos la interfaz para la respuesta del logout\n+interface LogoutResponse {\n+  message?: string;\n+  success?: boolean;\n+  [key: string]: unknown; // Para cualquier propiedad adicional\n+}\n+\n+// Interfaz para el estado del loader\n+interface LoaderState {\n+  loading: boolean;\n+  action: string;\n+}\n+\n+axios.defaults.baseURL = environment.apiUrl;\n+\n+export const useLogout = () => {\n+  const storedToken = Cookies.get('authToken');\n+  const [getResponse, setGetResponse] = useState<LogoutResponse | null>(null);\n+  const [loader, setLoader] = useState<LoaderState>({ loading: false, action: \"loader\" });\n+  const { logout } = useAuth();\n+  const { showError, showSuccess } = useToast();\n+  const router = useRouter(); // Inicializa el router\n+  \n+  const postLogout = async () => {\n+    if (!storedToken) {\n+      showError(\"No hay sesión activa\");\n+      return;\n+    }\n+\n+    const method = \"POST\";\n+    // URL con el token como parámetro de consulta\n+    const url = `/logout?secret_token=${storedToken}`;\n+\n+    setLoader({ loading: true, action: \"logout\" });\n+\n+    try {\n+      const response = await axios.request<LogoutResponse>({\n+        method,\n+        url,\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${storedToken}`\n+        }\n+      });\n+\n+      \n+      if (response.status === 200 || response.status === 201 || response.data?.success) {\n+        showSuccess(response.data?.message || \"Sesión cerrada correctamente\");\n+        setGetResponse(response.data);\n+        logout();\n+\n+        router.push(\"/logind\");\n+      } else {\n+        console.error(\"Invalid response data:\", response.data);\n+        showError(\"Error al cerrar sesión\");\n+        setGetResponse(response.data);\n+      }\n+\n+      \n+    } catch (error: unknown) {\n+      // Verificar si es un error de Axios y tratarlo adecuadamente\n+      if (axios.isAxiosError(error)) {\n+        const axiosError = error as AxiosError<{message?: string}>;\n+        showError(\n+          axiosError.response?.data?.message || \"Ocurrió un error al cerrar sesión\"\n+        );\n+      } else {\n+        showError(\"Ocurrió un error inesperado al cerrar sesión\");\n+      }\n+      console.error(\"Logout error:\", error);\n+      return error;\n+    } finally {\n+      setLoader({ loading: false, action: \"\" });\n+    }\n+  };\n+\n+  return {\n+    postLogout,\n+    getResponse,\n+    loader,\n+  };\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745469360222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,8 @@\n       if (response.status === 200 || response.status === 201 || response.data?.success) {\n         showSuccess(response.data?.message || \"Sesión cerrada correctamente\");\n         setGetResponse(response.data);\n         logout();\n-\n         router.push(\"/logind\");\n       } else {\n         console.error(\"Invalid response data:\", response.data);\n         showError(\"Error al cerrar sesión\");\n@@ -86,79 +85,5 @@\n     postLogout,\n     getResponse,\n     loader,\n   };\n-};\n-import { useAuth } from \"@/context/AuthContext\";\n-import { useToast } from \"@/context/ToastContext\";\n-import { environment } from \"@/environments/environment\";\n-import axios from \"axios\";\n-import { useState } from \"react\";\n-import Cookies from \"js-cookie\";\n-import { useRouter } from \"next/navigation\"; \n-axios.defaults.baseURL = environment.apiUrl;\n-\n-export const useLogout = () => {\n-  const storedToken = Cookies.get('authToken');\n-  const [getResponse, setGetResponse] = useState<any>(null);\n-  const [loader, setLoader] = useState({ loading: false, action: \"loader\" });\n-  const { logout } = useAuth();\n-  const { showError, showSuccess } = useToast();\n-  const router = useRouter(); // Inicializa el router\n-  const postLogout = async () => {\n-    if (!storedToken) {\n-      showError(\"No hay sesión activa\");\n-      return;\n-    }\n-\n-    const method = \"POST\";\n-    // URL con el token como parámetro de consulta\n-    const url = `/logout?secret_token=${storedToken}`;\n-\n-    setLoader({ loading: true, action: \"logout\" });\n-\n-    try {\n-      interface LogoutResponse {\n-        message?: string;\n-        success?: boolean;\n-      }\n-\n-      const response = await axios.request<LogoutResponse>({\n-        method,\n-        url,\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${storedToken}`\n-        }\n-      });\n-\n-      \n-      if (response.status === 200 || response.status === 201 || response.data?.success) {\n-        showSuccess(response.data?.message || \"Sesión cerrada correctamente\");\n-        setGetResponse(response.data);\n-        logout();\n-\n-        router.push(\"/logind\");\n-      } else {\n-        console.error(\"Invalid response data:\", response.data);\n-        showError(\"Error al cerrar sesión\");\n-        setGetResponse(response.data);\n-      }\n-\n-      \n-    } catch (error: ku) {\n-      showError(\n-        error.response?.data?.message || \"Ocurrió un error al cerrar sesión\"\n-      );\n-      console.error(\"Logout error:\", error);\n-      return error;\n-    } finally {\n-      setLoader({ loading: false, action: \"\" });\n-    }\n-  };\n-\n-  return {\n-    postLogout,\n-    getResponse,\n-    loader,\n-  };\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745469620550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,20 @@\n import { useAuth } from \"@/context/AuthContext\";\n import { useToast } from \"@/context/ToastContext\";\n import { environment } from \"@/environments/environment\";\n-import axios, { AxiosError } from \"axios\";\n+import axios from \"axios\";\n import { useState } from \"react\";\n import Cookies from \"js-cookie\";\n import { useRouter } from \"next/navigation\"; \n-\n-// Definimos la interfaz para la respuesta del logout\n-interface LogoutResponse {\n-  message?: string;\n-  success?: boolean;\n-  [key: string]: unknown; // Para cualquier propiedad adicional\n-}\n-\n-// Interfaz para el estado del loader\n-interface LoaderState {\n-  loading: boolean;\n-  action: string;\n-}\n-\n axios.defaults.baseURL = environment.apiUrl;\n \n export const useLogout = () => {\n   const storedToken = Cookies.get('authToken');\n-  const [getResponse, setGetResponse] = useState<LogoutResponse | null>(null);\n-  const [loader, setLoader] = useState<LoaderState>({ loading: false, action: \"loader\" });\n+  const [getResponse, setGetResponse] = useState<any>(null);\n+  const [loader, setLoader] = useState({ loading: false, action: \"loader\" });\n   const { logout } = useAuth();\n   const { showError, showSuccess } = useToast();\n   const router = useRouter(); // Inicializa el router\n-  \n   const postLogout = async () => {\n     if (!storedToken) {\n       showError(\"No hay sesión activa\");\n       return;\n@@ -41,8 +26,13 @@\n \n     setLoader({ loading: true, action: \"logout\" });\n \n     try {\n+      interface LogoutResponse {\n+        message?: string;\n+        success?: boolean;\n+      }\n+\n       const response = await axios.request<LogoutResponse>({\n         method,\n         url,\n         headers: {\n@@ -55,26 +45,21 @@\n       if (response.status === 200 || response.status === 201 || response.data?.success) {\n         showSuccess(response.data?.message || \"Sesión cerrada correctamente\");\n         setGetResponse(response.data);\n         logout();\n+\n         router.push(\"/logind\");\n       } else {\n         console.error(\"Invalid response data:\", response.data);\n         showError(\"Error al cerrar sesión\");\n         setGetResponse(response.data);\n       }\n \n       \n-    } catch (error: unknown) {\n-      // Verificar si es un error de Axios y tratarlo adecuadamente\n-      if (axios.isAxiosError(error)) {\n-        const axiosError = error as AxiosError<{message?: string}>;\n-        showError(\n-          axiosError.response?.data?.message || \"Ocurrió un error al cerrar sesión\"\n-        );\n-      } else {\n-        showError(\"Ocurrió un error inesperado al cerrar sesión\");\n-      }\n+    } catch (error: any) {\n+      showError(\n+        error.response?.data?.message || \"Ocurrió un error al cerrar sesión\"\n+      );\n       console.error(\"Logout error:\", error);\n       return error;\n     } finally {\n       setLoader({ loading: false, action: \"\" });\n"
                },
                {
                    "date": 1745469897951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,35 @@\n import { useAuth } from \"@/context/AuthContext\";\n import { useToast } from \"@/context/ToastContext\";\n import { environment } from \"@/environments/environment\";\n-import axios from \"axios\";\n+import axios, { AxiosError } from \"axios\";\n import { useState } from \"react\";\n import Cookies from \"js-cookie\";\n import { useRouter } from \"next/navigation\"; \n+\n+// Definimos la interfaz para la respuesta del logout\n+interface LogoutResponse {\n+  message?: string;\n+  success?: boolean;\n+  [key: string]: unknown; // Para cualquier propiedad adicional\n+}\n+\n+// Interfaz para el estado del loader\n+interface LoaderState {\n+  loading: boolean;\n+  action: string;\n+}\n+\n axios.defaults.baseURL = environment.apiUrl;\n \n export const useLogout = () => {\n   const storedToken = Cookies.get('authToken');\n-  const [getResponse, setGetResponse] = useState<any>(null);\n-  const [loader, setLoader] = useState({ loading: false, action: \"loader\" });\n+  const [getResponse, setGetResponse] = useState<LogoutResponse | null>(null);\n+  const [loader, setLoader] = useState<LoaderState>({ loading: false, action: \"loader\" });\n   const { logout } = useAuth();\n   const { showError, showSuccess } = useToast();\n   const router = useRouter(); // Inicializa el router\n+  \n   const postLogout = async () => {\n     if (!storedToken) {\n       showError(\"No hay sesión activa\");\n       return;\n@@ -26,13 +41,8 @@\n \n     setLoader({ loading: true, action: \"logout\" });\n \n     try {\n-      interface LogoutResponse {\n-        message?: string;\n-        success?: boolean;\n-      }\n-\n       const response = await axios.request<LogoutResponse>({\n         method,\n         url,\n         headers: {\n@@ -45,21 +55,26 @@\n       if (response.status === 200 || response.status === 201 || response.data?.success) {\n         showSuccess(response.data?.message || \"Sesión cerrada correctamente\");\n         setGetResponse(response.data);\n         logout();\n-\n         router.push(\"/logind\");\n       } else {\n         console.error(\"Invalid response data:\", response.data);\n         showError(\"Error al cerrar sesión\");\n         setGetResponse(response.data);\n       }\n \n       \n-    } catch (error: any) {\n-      showError(\n-        error.response?.data?.message || \"Ocurrió un error al cerrar sesión\"\n-      );\n+    } catch (error: unknown) {\n+      // Verificar si es un error de Axios y tratarlo adecuadamente\n+      if (axios.isAxiosError(error)) {\n+        const axiosError = error as AxiosError<{message?: string}>;\n+        showError(\n+          axiosError.response?.data?.message || \"Ocurrió un error al cerrar sesión\"\n+        );\n+      } else {\n+        showError(\"Ocurrió un error inesperado al cerrar sesión\");\n+      }\n       console.error(\"Logout error:\", error);\n       return error;\n     } finally {\n       setLoader({ loading: false, action: \"\" });\n"
                }
            ],
            "date": 1745463471484,
            "name": "Commit-0",
            "content": "import { useAuth } from \"@/context/AuthContext\";\nimport { useToast } from \"@/context/ToastContext\";\nimport { environment } from \"@/environments/environment\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport Cookies from \"js-cookie\";\nimport { useRouter } from \"next/navigation\"; \naxios.defaults.baseURL = environment.apiUrl;\n\nexport const useLogout = () => {\n  const storedToken = Cookies.get('authToken');\n  const [getResponse, setGetResponse] = useState<any>(null);\n  const [loader, setLoader] = useState({ loading: false, action: \"loader\" });\n  const { logout } = useAuth();\n  const { showError, showSuccess } = useToast();\n  const router = useRouter(); // Inicializa el router\n  const postLogout = async () => {\n    if (!storedToken) {\n      showError(\"No hay sesión activa\");\n      return;\n    }\n\n    const method = \"POST\";\n    // URL con el token como parámetro de consulta\n    const url = `/logout?secret_token=${storedToken}`;\n\n    setLoader({ loading: true, action: \"logout\" });\n\n    try {\n      interface LogoutResponse {\n        message?: string;\n        success?: boolean;\n      }\n\n      const response = await axios.request<LogoutResponse>({\n        method,\n        url,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${storedToken}`\n        }\n      });\n\n      \n      if (response.status === 200 || response.status === 201 || response.data?.success) {\n        showSuccess(response.data?.message || \"Sesión cerrada correctamente\");\n        setGetResponse(response.data);\n        logout();\n\n        router.push(\"/logind\");\n      } else {\n        console.error(\"Invalid response data:\", response.data);\n        showError(\"Error al cerrar sesión\");\n        setGetResponse(response.data);\n      }\n\n      \n    } catch (error: ku) {\n      showError(\n        error.response?.data?.message || \"Ocurrió un error al cerrar sesión\"\n      );\n      console.error(\"Logout error:\", error);\n      return error;\n    } finally {\n      setLoader({ loading: false, action: \"\" });\n    }\n  };\n\n  return {\n    postLogout,\n    getResponse,\n    loader,\n  };\n};"
        }
    ]
}